Estructura:

<index.html>: es el archivo principal de HTML donde se define la estructura del contenido de la 
pagina web. Es el punto de entrada de la aplicacion web. Incluye referencias a los archivos CSS y JS.

<index.js>: Archivo de JavaScript principal donde se maneja la lógica del juego. Es referenciado 
desde el HTML para manipular el DOM (Document Object Model) y responder a eventos del usuario.



<Data/data.js>: Archivo donde se almacenan los datos relacionados con el juego.

<Render/main.js>: Archivo donde manejamos la renderizacion de elementos.

<Styles/index.css>: Archivo CSS donde defines los estilos visuales de la pagina. Es referenciado desde 
el archivo HTML para aplicar los estilos allí definidos.

/* original function to give highlight ids for rook. The movement is diagonal
I'm going to keep this for a while to be sure */
/* function giveRookHighlightId(id) {
    let finalReturnArray = [];

    function top(id) {
        let alpha = id[0];
        let num = Number(id[1]);
        let resArr = [];
        
        while (num != 8) {
            //alpha = String.fromCharCode(alpha.charCodeAt(0) - 1);
            num = num + 1;
            resArr.push(`${alpha}${num}`);
        }
        return resArr;
    }

    function bottom(id) {
        let alpha = id[0];
        let num = Number(id[1]);
        let resArr = [];
        
        while (num != 1) {
            //alpha = String.fromCharCode(alpha.charCodeAt(0) - 1);
            num = num - 1;
            resArr.push(`${alpha}${num}`);
        }
        return resArr;
    }

    function right(id) {
        let alpha = id[0];
        let num = Number(id[1]);
        let resArr = [];

        while (alpha != "h") {
            alpha = String.fromCharCode(alpha.charCodeAt(0) + 1);
            //num = num + 1;
            resArr.push(`${alpha}${num}`);
        }
        return resArr;
    }

    function left(id) {
        let alpha = id[0];
        let num = Number(id[1]);
        let resArr = [];

        while (alpha != "a") {
            alpha = String.fromCharCode(alpha.charCodeAt(0) - 1);
            //num = num + 1;
            resArr.push(`${alpha}${num}`);
        }
        return resArr;
    }

    return {
        back: top(id),
        front: bottom(id),
        right: right(id),
        left: left(id),
    };
} */

/* original function to give highlight ids for bishop. The movement is diagonal
I'm going to keep this for a while to be sure */
/* function giveBishopHighlightIds(id) {
    let finalReturnArray = [];
    
    function topLeft(id) {
        let alpha = id[0];
        let num = Number(id[1]);
        let resArr = [];
        
        while (alpha != "a" && num != 8) {
            alpha = String.fromCharCode(alpha.charCodeAt(0) - 1);
            num = num + 1;
            resArr.push(`${alpha}${num}`);
        }
        return resArr;
    }

    function bottomLeft(id) {
        let alpha = id[0];
        let num = Number(id[1]);
        let resArr = [];

        while (alpha != "a" && num != 1) {
            alpha = String.fromCharCode(alpha.charCodeAt(0) - 1);
            num = num - 1;
            resArr.push(`${alpha}${num}`);
        }
        return resArr;
    }

    function topRight(id) {
        let alpha = id[0];
        let num = Number(id[1]);
        let resArr = [];

        while (alpha != "h" && num != 8) {
            alpha = String.fromCharCode(alpha.charCodeAt(0) + 1);
            num = num + 1;
            resArr.push(`${alpha}${num}`);
        }
        return resArr;
    }

    function bottomRight(id) {
        let alpha = id[0];
        let num = Number(id[1]);
        let resArr = [];

        while (alpha != "h" && num != 1) {
            alpha = String.fromCharCode(alpha.charCodeAt(0) + 1);
            num = num - 1;
            resArr.push(`${alpha}${num}`);
        }
        return resArr;
    }

    return {
        topLeft: topLeft(id),
        topRight: topRight(id),
        bottomLeft: bottomLeft(id),
        bottomRight: bottomRight(id),
    };
} */


/* function giveKnightHighlightIds(id) {
    if (!id)
        return;
    function left() {
        let alpha = id[0];
        let num = Number(id[1]);
        let resArr = [];

        let tmp = 0;

        while (alpha != "a") {
            if (tmp == 2)
                break;
            alpha = String.fromCharCode(alpha.charCodeAt(0) - 1);
            //num = num + 1;
            resArr.push(`${alpha}${num}`);
            tmp += 1;
        }
        
        if (resArr.length == 2) {
            let finalArr = [];
            const lastElement = resArr[resArr.length - 1];
            let alpha = lastElement[0];
            let num = Number(lastElement[1]);
            if (num < 8) {
                finalArr.push(`${alpha}${Number(num + 1)}`)
            }
            if (num > 1) {
                finalArr.push(`${alpha}${Number(num - 1)}`)
            }
            //resArr.push(`${Number(lastElement[1])}`)
            return finalArr;
        }
        else {
            return [];
        }
    }
    function right() {
        let alpha = id[0];
        let num = Number(id[1]);
        let resArr = [];

        let tmp = 0;

        while (alpha != "h") {
            if (tmp == 2)
                break;
            alpha = String.fromCharCode(alpha.charCodeAt(0) + 1);
            //num = num + 1;
            resArr.push(`${alpha}${num}`);
            tmp += 1;
        }
        
        if (resArr.length == 2) {
            let finalArr = [];
            const lastElement = resArr[resArr.length - 1];
            let alpha = lastElement[0];
            let num = Number(lastElement[1]);
            if (num < 8) {
                finalArr.push(`${alpha}${Number(num + 1)}`)
            }
            if (num > 1) {
                finalArr.push(`${alpha}${Number(num - 1)}`)
            }
            //resArr.push(`${Number(lastElement[1])}`)
            return finalArr;
        }
        else {
            return [];
        }
    }
    function top() {
        let alpha = id[0];
        let num = Number(id[1]);
        let resArr = [];

        let tmp = 0;

        while (num != 8) {
            if (tmp == 2)
                break;
            //alpha = String.fromCharCode(alpha.charCodeAt(0) + 1);
            num += 1;
            resArr.push(`${alpha}${num}`);
            tmp += 1;
        }
        
        if (resArr.length == 2) {
            let finalArr = [];
            const lastElement = resArr[resArr.length - 1];
            let alpha = lastElement[0];
            let num = Number(lastElement[1]);
            if (alpha != "a") {
                let alpha2 = String.fromCharCode(alpha.charCodeAt(0) - 1);
                finalArr.push(`${alpha2}${num}`)
            }
            if (alpha != "h") {
                let alpha2 = String.fromCharCode(alpha.charCodeAt(0) + 1);
                finalArr.push(`${alpha2}${num}`)
            }
            //resArr.push(`${Number(lastElement[1])}`)
            return finalArr;
        }
        else {
            return [];
        }
    }
    function bottom() {
        let alpha = id[0];
        let num = Number(id[1]);
        let resArr = [];

        let tmp = 0;

        while (num != 1) {
            if (tmp == 2)
                break;
            //alpha = String.fromCharCode(alpha.charCodeAt(0) + 1);
            num -= 1;
            resArr.push(`${alpha}${num}`);
            tmp += 1;
        }
        
        if (resArr.length == 2) {
            let finalArr = [];
            const lastElement = resArr[resArr.length - 1];
            let alpha = lastElement[0];
            let num = Number(lastElement[1]);
            if (alpha != "a") {
                let alpha2 = String.fromCharCode(alpha.charCodeAt(0) - 1);
                finalArr.push(`${alpha2}${num}`)
            }
            if (alpha != "h") {
                let alpha2 = String.fromCharCode(alpha.charCodeAt(0) + 1);
                finalArr.push(`${alpha2}${num}`)
            }
            //resArr.push(`${Number(lastElement[1])}`)
            return finalArr;
        }
        else {
            return [];
        }
    }
    return [...top(), ...bottom(), ...left(), ...right()]
} */

original highlightSquareIds calculations for pawns

//on intial postion, pwns moves different
  if (curr_pos[1] == "7") { // "2" -> for whitePawn
    highlightSquareIds = [
      `${curr_pos[0]}${Number(curr_pos[1]) - 1}`, // + 1 -> for whitePawn
      `${curr_pos[0]}${Number(curr_pos[1]) - 2}`, ]; // + 2 -> for whitePawn
  }
  else {
    highlightSquareIds = [`${curr_pos[0]}${Number(curr_pos[1]) - 1}`,]; // + 1 -> for whitePawn
  }

  highlightSquareIds = checkSquareCaptureId(highlightSquareIds);

original capture logic calculations for pawns
  /* //capture id logic
  const col1 = `${String.fromCharCode(curr_pos[0].charCodeAt(0) - 1)}${Number(curr_pos[1]) + 1}`; //this last add operation is -1 for black pawns
  const col2 = `${String.fromCharCode(curr_pos[0].charCodeAt(0) + 1)}${Number(curr_pos[1]) + 1}`;//this last add operation is -1 for black pawns

  let captureIds = [col1, col2];*/

  /* function test(kingInitialMoves){
  console.log(`en test kingInitialMoves: ${kingInitialMoves}`)
  
  let res = [];
  res = res.concat(test2(globalPiece.black_bishop_1.current_pos));
  res = res.concat(test2(globalPiece.black_bishop_2.current_pos));
  for (let pawn of globalPiece.black_pawns) {
    let auxCapture = pawnCaptureOptions(pawn.current_pos, -1);
    res = res.concat(auxCapture);
  }
  console.log(`res: ${res}`)
  for (let i = kingInitialMoves.length - 1; i >= 0; i--) {
    if (res.find(e => e === kingInitialMoves[i])) {
      console.log(`element: ${kingInitialMoves[i]}`);
      kingInitialMoves.splice(i, 1);
    }
  }
  console.log(`resultado final: ${kingInitialMoves}`)
} */
